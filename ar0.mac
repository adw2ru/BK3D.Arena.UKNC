	;
	CLRB BITFLD
	CLR AMAP
	;
	; CLEAN ALL SCREENS AND BUFFERS
	; INCLUDING EMPTY LINE
	CALL CLWHLE
	;
	; SET TIMER
	MOV @#100,(PC)+
OLDTMI:	.WORD 0
	MOV @#102,(PC)+
OLDTMM:	.WORD 0
	MOV #NEWTMI,@#100
	MOV #200,@#102
	;
	; TURN ON TIMER IN CPU
	MOV #F_TMR,R0
	CALL SCH2
	TST @#PpuComm
	BNE .-4
	;
	MTPS #0
	;
	JMP GOTIT
	;
	; GAME LOGIC THREAD
NEWTMI:	BITB BITFLD,#8.		; IS ACTIVE?
	BEQ 1$			; NO->DO NOTHING
	BIT SKIP,#1		; 1/2
	BNE 1$
	MOV R0,-(SP)
	MOV R1,-(SP)
	MOV R2,-(SP)
	MOV R3,-(SP)
	MOV R4,-(SP)
	MOV R5,-(SP)
	MOV @#176640,-(SP)
	CALL GLOGIC		; PROCESS PLAYER&MONSTERS CONTROL
	MOV (SP)+,@#176640
	MOV (SP)+,R5
	MOV (SP)+,R4
	MOV (SP)+,R3
	MOV (SP)+,R2
	MOV (SP)+,R1
	MOV (SP)+,R0
1$:	INC (PC)+
SKIP:	.WORD 0
	RTI
	;
	; UKNC SEND CMD TO CHANNEL 2
	; IN: R0=COMMAND (LSB)
SCH2:	MOV #1,@#PpuComm
	BIT #128.,@#176674
	BEQ SCH2
	MOVB R0,@#176676
1$:	BIT #128.,@#176674
	BEQ 1$
	RET
	;
	; CLEAN WHOLE SCREEN(S)
CLWHLE:	MOV #40000,R0
	MOV #15440.,R3	; (128+32+1+32)*80
	CLR (R0)+
	SOB R3,.-2
	; CLEAN VIDEO RAM
CLVRAM:	MOV #100000,@#176640
	MOV #20480.,R3	; 256*80
1$:	CLR @#176642
	INC @#176640
	SOB R3,1$
	RET
	;
	; VARIABLES
	;
GSTATE:	.WORD 0		; GAME STATE
	;
	; 0=EXIT
	; 1=GAME RUNNING
	; 2=PAUSED
	; 3=THE	PLAYER WON
	; 4=THE	HUNTERS	WON
	;
BITFLD:	.BYTE 0		;
FRCNTR:	.BYTE 0		; FRAME	COUNTER
	.EVEN
	;
	; GAME AMMO&OUTPUT
AMMO:	.BYTE 10.
OLDAM:	.BYTE 1.
	.EVEN
	;
	; GAME SCORE&OUTPUT
SCORE:	.BYTE 0.,0.
OLDSCR:	.BYTE 1.,0.
	.EVEN
	;
	; PLAYER VARS (WILL BE LOADED WITH MAP)
PLX:	.WORD 0
PLY:	.WORD 0
PLA:	.WORD 0
	;
SPLX:	.WORD 0
SPLY:	.WORD 0
SPLA:	.WORD 0
	;
PROCSK:	.WORD KeyLeft,KeyRight,KeyUp,KeyDown,KeySpace
	.WORD KeyK1,KeyK2,KeyK3,KeyK5,KeyEnter
PROCSP:	.WORD DLFT,DRGHT,DUP,DDWN,DSPC
	.WORD DTAB,DPAUS,DROT,DEXIT,DREST
PROCSR:	.WORD 177772,177772,177772,177772,177772
	.WORD 177760,177774,177772,177760,177763
PROCSC:	.WORD 0,0,0,0,1
	.WORD 1,1,1,1,1
	;
	; CONTROLS PROCESSING
JOY:	CLR R0
1$:	MOV PROCSK(R0),R1
	TST (R1)
	BEQ 2$
	TST PROCSC(R0)
	BEQ 3$
	CLR (R1)
3$:	MOV GSTATE,R1
	BIC PROCSR(R0),R1
	BEQ 2$
	MOV PROCSP(R0),R1
	MOV R0,-(SP)
	CALL (R1)
	MOV (SP)+,R0
2$:	TST (R0)+
	CMP R0,#20.
	BNE 1$
	RET
	;
	; INC FRAME COUNTER
	; USED IN VISIBILITY MAP
	; SHOULD BE 0,2,4...
IFRC:	MOVB FRCNTR,R0
	INCB R0
	INCB R0
	MOVB R0,FRCNTR
	BNE 1$
	CALL CLVIS	; CLEAR	VISIBILITY MAP
1$:	RET
	;
	; INTERNAL GAME LOGIC
GLOGIC:	CMP #GSPAUS,GSTATE
	BEQ 1$
	CALL MNMOV	; MONSTERS MOVE
1$:	CALL JOY	; INPUT&PLAYER MOVE
	CMP #GSHTWN,GSTATE
	BNE 2$
	CALL SETTA
	MOV MNBF+6.,R1
	MOV MNBF+4.,R0
	CALL SETPL
2$:	RET
	;
	; THREAD SYNC
THSNC:	MTPS #200
	; PLAYER SYNC
	MOV PLA,SPLA
	MOV PLX,SPLX
	MOV PLY,SPLY
	; MONSTERS SYNC
	CALL MNSYNC
	MTPS #0
	RET
	;
	; LOAD MAP
	; R0=MAP NUMBER	0..N
LMAP:	CLRB FRCNTR	; FRAME	COUNTER
	CALL PREPM	; PREPARE RUNTIME MAP &	PLAYER POSITION
	CALL CLVIS	; CLEAR	VISIBILITY MAP
	CALL MNSET	; SET MONSTERS
	CALL PREPR	; PREPARE RENDER OUTPUT
	CALL INISCR	; RESET	SCORE
	CALL INIAM	; RESET	AMMO
	RET
	;
GO:	; GAME STARTS HERE
	CALL PREP0	; MAKE UNROLLED	CODE
	CALL CLPSC	; CALC PRESCALLERS
	CALL DRST2	; RESTART LEVEL
	BISB #8.,BITFLD	; TIMER PROCESS ON
	;
	; MAIN LOOP
ML:	CALL THSNC	; SYNC LOGIC&DRAW THREADS
	CALL IFRC	; FOR VISIBILITY MAP
	CALL RENDR	; RENDER WALLS
	CALL MNPRC	; DRAW MONSTERS
	CALL DRDIFF	; DRAW WALLS INTO SCREEN
	CALL PRNSCR	; PRINT	SCORE
	CALL PRNAM	; PRINT	AMMO
	;
ML2:	;CALL GLOGIC	; PROCESS PLAYER&MONSTERS CONTROL
	CALL DOMAP	; PROCESS MAP
	CALL DORST	; PROCESS RESTART
	CALL DOMSG	; PROCESS MESSAGES
	MOV GSTATE,R0	; CHECK	GAME STATE
	BEQ 1$		; 0=EXIT
	ASR R0
	BEQ ML		; 1=GAME RUNNING
	ASR R0
	BEQ ML2		; 2=GAME PAUSED
	ASR R0
	BEQ ML		; 4=PLAYER WON
	BR ML		; AND GO BACK TO MAIN LOOP
1$:	BICB #8.,BITFLD	; TIMER PROCESS OFF
	RET		; GAME EXIT
	;
	; DO RESTART
DORST:	BITB #4,BITFLD	; CHECK	FOR RESTART PRESSED
	BEQ 1$
	BICB #4,BITFLD	; CLEAR	FLAG
	BICB #8.,BITFLD	; TIMER PROCESS OFF
	CALL DRST2
	BISB #8.,BITFLD	; TIMER PROCESS ON
1$:	RET
	;
	; PROCESS MAP
DOMAP:	BITB #1,BITFLD	; CHECK	FOR TAB	PRESSED
	BEQ 2$		; NOT PRESSED
	BICB #1,BITFLD	; CLEAR	PRESSED	FLAG
	BITB #2,BITFLD	; CHECK	STATE
	BNE 1$		; NEED DRAW
	CALL CLRM	; NEED CLEAR
	RET
1$:	CALL DRAWM
	CALL MNDRW	; DRAW MONSTERS&PLAYER ON MAP
	RET
2$:	BITB #2,BITFLD	; NEED DRAW MAP?
	BEQ 3$
	CMP #GSPAUS,GSTATE
	BEQ 3$
	CALL MNDRW	; DRAW MONSTERS&PLAYER ON MAP
3$:	RET
	;
	; PROCESS MESSAGES
DOMSG:	BITB #16.,BITFLD
	BEQ 1$
	BICB #16.,BITFLD
	MOV #2,R5
	CALL PRNMS
	MOV #3,R5
	CALL PRNMS
1$:	BITB #32.,BITFLD
	BEQ 2$
	BICB #32.,BITFLD
	MOV #1,R5
	CALL PRNMS
	MOV #3,R5
	CALL PRNMS
2$:	BITB #64.,BITFLD
	BEQ 3$
	BICB #64.,BITFLD
	CLR R5
	CALL PRNMS
3$:	RET
	;
	; DO KT	(EXIT)
DEXIT:	CLR GSTATE
	RET
	;
	; DO TAB
DTAB:	MOV #2,R0
	MOVB BITFLD,R1
	XOR R0,R1
	MOVB R1,BITFLD	; SWITCH TAB FLAG
	BISB #1,BITFLD	; SET TAB PRESSED FLAG
1$:	RET
	;
	; DO SPACE
DSPC:	CALL DPROJ1
	RET
	;
	; SET PLAYER
SETPL:	MOV R0,PLX
	MOV R1,PLY
	RET
	;
	; GET PLAYER DIRECTION
	; OUT: R0=VX,R1=VY
GETDIR:	MOV PLA,R0
	CALL GSNCS
	RET
	;
	; DO DOWN
DDWN:	CALL GETDIR
DDWN2:	MOV R0,R2
	MOV R1,R3
	NEG R0
	NEG R1
	ADD PLX,R0
	ADD PLY,R1
	CALL CHECK
	BNE 1$
	CALL SETPL
	BR 3$
1$:	ADD R3,R1
	CALL CHECK
	BNE 2$
	CALL SETPL
	BR 3$
2$:	SUB R3,R1
	ADD R2,R0
	CALL CHECK
	BNE 3$
	CALL SETPL
3$:	RET
	;
	; DO UP
DUP:	CALL GETDIR
DUP2:	MOV R0,R2
	MOV R1,R3
	ADD PLX,R0
	ADD PLY,R1
	CALL CHECK
	BNE 1$
	CALL SETPL
	BR 3$
1$:	SUB R3,R1
	CALL CHECK
	BNE 2$
	CALL SETPL
	BR 3$
2$:	ADD R3,R1
	SUB R2,R0
	CALL CHECK
	BNE 3$
	CALL SETPL
3$:	RET
	;
	; DO SHIFT LEFT
DSL:	CALL GETDIR
	XOR R0,R1
	XOR R1,R0
	XOR R0,R1
	NEG R1
	JMP DUP2
	;
	; DO SHIFT RIGHT
DSR:	CALL GETDIR
	XOR R0,R1
	XOR R1,R0
	XOR R0,R1
	NEG R1
	JMP DDWN2
	;
	; DO LEFT
DLFT:	TST KeyShift
	BNE DSL
	DEC PLA
	BPL 1$
	MOV #71.,PLA
1$:	RET
	;
	; DO RIGHT
DRGHT:	TST KeyShift
	BNE DSR
	INC PLA
	CMP PLA,#72.
	BLO 1$
	CLR PLA
1$:	RET
	;
	; DO 180 ROTATE
DROT:	MOV PLA,R0
	ADD #36.,R0
	CMP R0,#72.
	BLO 1$
	SUB #72.,R0
1$:	MOV R0,PLA
	RET
	;
	; DO PAUSE
DPAUS:	CMP GSTATE,#GSGAME
	BNE 2$
	; GAME RUNNING->PAUSE IT
	MOV #GSPAUS,GSTATE	; PAUSE
	;CLR R5
	;CALL PRNMS
	BISB #64.,BITFLD
	BR 1$
2$:	CMP GSTATE,#GSPAUS
	BNE 1$
	; GAME PAUSED->RUN IT
	MOV #GSGAME,GSTATE	; RUNNING
	CALL CLMS
1$:	RET
	;
	; DO RESTART GAME
DREST:	CMP GSTATE,#GSPLWN
	BEQ 1$
	CMP GSTATE,#GSHTWN
	BEQ 1$
	RET
1$:	BISB #4,BITFLD		; SET FLAG TO RESTART
	RET
	;
DRST2:	MOV (PC)+,R0
AMAP:	.WORD 0
	CALL LMAP		; LOAD MAP
	MOV #GSGAME,GSTATE	; RUNNING
	CALL CLMS
	BITB #2,BITFLD		; IF MAP VISIBLE THEN REDRAW
	BEQ 1$
	CALL CLRM
	CALL DRAWM
1$:	RET
	;
