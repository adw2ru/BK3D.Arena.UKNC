	;
WMS:	.WORD 0	; ACTUAL SCREEN TO DRAW INTO
	;
	; CLEAR	MONSTERS SCREEN	BY USING MASKS
	; R0 - VER.MASK
	; R1 - HOR.MASK
CLMM:	MOV WMS,R3
	ASL R0
0$:	BCS 1$
	BEQ 2$
4$:	ADD #C_SCRWID+C_SCRWID,R3
	ASL R0
	BR 0$
1$:	MOV R1,R2 ; LINE MARKED	-> PROCESS
	MOV R3,R4
	ASL R2
5$:	BCS 3$
	BEQ 4$
	ADD #8.,R4
	ASL R2
	BR 5$
3$:	CLR C_SCRWID(R4)
	CLR (R4)+
	CLR C_SCRWID(R4)
	CLR (R4)+
	CLR C_SCRWID(R4)
	CLR (R4)+
	CLR C_SCRWID(R4)
	CLR (R4)+
	ASL R2
	BR 5$
2$:	RET
	;
	; REDRAW MASKS INIT
MSKSIN:	MOV #-1.,(PC)+
MHMSK:	.WORD 0
	MOV #-1.,(PC)+
MVMSK:	.WORD 0
	MOV #-1.,(PC)+
XHMSK:	.WORD 0
	MOV #-1.,(PC)+
XVMSK:	.WORD 0
	RET
	;
	; PROCESS MONSTERS
MNPRC:	BITB FRCNTR,#2
	BEQ 1$
	MOV #C_MADDR,WMS
	MOV MVMSK,R0
	MOV MHMSK,R1
	BR 2$
1$:	MOV #C_XADDR,WMS
	MOV XVMSK,R0
	MOV XHMSK,R1
2$:     CALL CLMM	; CLEAR
	CLR (PC)+
HMSK:	.WORD 0
	CLR (PC)+
VMSK:	.WORD 0
	CALL CLCD	; DIST
	CALL SORT       ; SORT
	CALL CLDP	; DRAW
	BITB FRCNTR,#2
	BEQ 1$
	MOV VMSK,MVMSK
	MOV HMSK,MHMSK
	MOV #V_SC0,R0
	BR 2$
1$:	MOV VMSK,XVMSK
	MOV HMSK,XHMSK
	MOV #V_SC2,R0
2$:	CALL SCH2
	RET
	;
	; CALCULATE DISTANCES
CLCD:   CLR SORTN

	MOV SPLA,R3
	ASL R3

	MOV #SMNBF,R5

1$:	TSTB (R5)
	BEQ 2$
	CLR R0
	BISB 3.(R5),R0
	CMPB VIS(R0),FRCNTR
	BNE 2$

	; CALC DIST
	MOV 4.(R5),R0
	SUB SPLX,R0
	ASR R0
	MOVB COST+1(R3),R1
	CALL SPMULS

	MOV 6.(R5),R0
	SUB SPLY,R0
	ASR R0
	MOVB SINT+1(R3),R1
	MOV R2,R4
	CALL SPMULS
	ADD R4,R2

	ASR R2
	ASR R2
	ASR R2
	ASR R2
	ASR R2

	MOV R2,10.(R5)	; SAVE DIST
	BLE 2$

	MOV SORTN,R2
	ASL R2
	MOV R5,SORTI(R2)
	INC SORTN

2$:	ADD #MNRS,R5
	CMP #SMNBFE,R5
	BNE 1$
	RET
	;
	; SORT FOR DISTANCES
SORT:	MOV #1,R0
2$:	CMP R0,SORTN
	BGE 1$
	MOV SORTN,R1
	SUB R0,R1
	CLR R2
4$:	CMP R2,R1
	BGE 3$
	MOV R2,R3
	ASL R3
	MOV SORTI(R3),R4
	MOV SORTI+2(R3),R5
	CMP 10.(R5),10.(R4)
	BGE 5$
	MOV R4,SORTI+2(R3)
	MOV R5,SORTI(R3)	
5$:	INC R2
	BR 4$
3$:	INC R0
	BR 2$
1$:	RET
SORTN:	.WORD 0
SORTI:	.BLKW 30.
	;
	; DRAW
CLDP:	MOV SORTN,R5

1$:	BEQ 6$
	DEC R5
	MOV R5,-(SP)
	ASL R5
	MOV SORTI(R5),R5

	MOV SPLA,R3
	ASL R3

	MOV 10.(R5),R4

	; CALC POS
	MOV 4.(R5),R0
	SUB SPLX,R0
	ASR R0
	MOVB SINT+1(R3),R1
	CALL SPMULS

	MOV 6.(R5),R0
	SUB SPLY,R0
	ASR R0
	MOVB COST+1(R3),R1
	MOV R2,R3
	CALL SPMULS

	SUB R3,R2
	BPL 3$
	NEG R2		; IF <0
	CALL SPDIV
	NEG R2
	BR 4$
3$:	CALL SPDIV	; IF >0

4$:	MOV R2,R0
	BPL 5$
	NEG R2
5$:	CMP R2,#64.
	BHIS 2$
	ADD #32.,R0	; POSITION -32..32->0..64

	MOVB (R5),R3	; TYPE 1..N
	ASL R3
	MOV DRTAB-2(R3),R3

	CALL (R3)	; DRAW

2$:	MOV (SP)+,R5
	BR 1$	

6$:	RET
	;
	; SPRITE&FX DRAW ROUTINES
DRTAB:	.WORD SPDRW		; TYPE 1
	.WORD SPDRW		; TYPE 2
	.WORD SPDRF		; TYPE 3
	.WORD SPDRF		; TYPE 4
	.WORD SPDRW		; TYPE 5
	;
XFRAMS:	.WORD XFR1,XFR2,XFR3,XFR4,XFR5,XFR6
XSCLRS:	.BYTE 1,1,1,1,1,1,1,1
	.BYTE 2,2,2,2
	.BYTE 3,3,3,3,3
	.BYTE 4,4,4,4,4
	.BYTE 5,5,5,5,5
	.BYTE 6,6,6,6,6
XSIZES:	.BYTE 1,3,3,5,5,7
XFR1:	.BYTE 377
XFR2:	.BYTE 0,377,0
	.BYTE 377,377,377
	.BYTE 0,377,0
XFR3:	.BYTE 377,377,377
	.BYTE 377,377,377
	.BYTE 377,377,377
XFR4:	.BYTE 0,0,377,0,0
	.BYTE 0,377,377,377,0
	.BYTE 377,377,377,377,377
	.BYTE 0,377,377,377,0
	.BYTE 0,0,377,0,0
XFR5:	.BYTE 0,377,377,377,0
	.BYTE 377,377,377,377,377
	.BYTE 377,377,377,377,377
	.BYTE 377,377,377,377,377
	.BYTE 0,377,377,377,0
XFR6:	.BYTE 0,0,377,377,377,0,0
	.BYTE 0,377,377,377,377,377,0
	.BYTE 377,377,377,377,377,377,377
	.BYTE 377,377,377,377,377,377,377
	.BYTE 377,377,377,377,377,377,377
	.BYTE 0,377,377,377,377,377,0
	.BYTE 0,0,377,377,377,0,0
	.EVEN
	;
	; SCALERS TABLE
SCTB:	.WORD SCL1,SCL2,SCL3,SCL4,SCL5,SCL6,SCL5,SCL6
	.WORD SCL5,SCL6,SCL5,SCL6,SCL5,SCL6,SCL5,SCL6
	.WORD SCL7,SCL8,SCL7,SCL8,SCL7,SCL8,SCL7,SCL8
	.WORD SCL7,SCL8,SCL7,SCL8,SCL7,SCL8,SCL7,SCL8
	;
	; SPECIAL VERSION FOR ATTACKS
SPDRF:	MOV R5,-(SP)
	; 16384/DIST
	MOV 10.(R5),R4
	CALL SPDVX
	; CALC WIDTH&HEIGHT
	MOV R2,-(SP)
	ASR R2
	ASR R2
	ASR R2
	ASR R2
	BEQ XR1
	CMP R2,#32.
	BHI XR1
	; OFFSET
	MOV R2,R3
	ASR R3
	; CHOICE SCALE VARIANT
	MOVB XSCLRS-1(R2),R2
	; TAKE FRAME
	MOV R2,R5
	ASL R5
	MOV XFRAMS-2(R5),R4
	; TAKE SIZE
	MOVB XSIZES-1(R2),R2
	MOV R2,R5
	ASR R5
	SUB R5,R0
	MOV R2,R1
	; OFFSET
	SUB R5,R3
	; VMSK
	MOV R2,R5
	ADD R3,R5
	MOV DRMSKV-1(R5),(PC)+
VTMP:	.WORD 0
	;
	MUL #C_SCRWID,R3
	;
XR2:	CMPB R0,#64.
	BHIS XR4
	MOVB R0,R5
	ASL R5
	CMP FRBF1(R5),(SP)
	BGE XR4
	; UPDATE MASKS
	MOVB R0,R5
	ASR R5
	BIS DRMSKH(R5),HMSK
	BIS VTMP,VMSK
	; DRAW
	MOV R0,-(SP)
	MOV R1,-(SP)
	MOV R2,-(SP)
	ASL R0
	ADD R3,R0
	ADD WMS,R0
XR3:	MOVB (R4)+,R1		; 377->177777,0->0
	BEQ XR5
	MOV R1,(R0)
XR5:	ADD #C_SCRWID,R0
	SOB R2,XR3
	MOV (SP)+,R2
	MOV (SP)+,R1
	MOV (SP)+,R0
XR4:	INC R0
	SOB R1,XR2
XR1:	TST (SP)+
	MOV (SP)+,R5
	RET
	;
	; REGULAR MONSTERS
SPDRW:	MOV R5,-(SP)
	; FIRE HUNTER->PLAYER
	CALL DPROJ2
	; 16384/DIST
	MOV 10.(R5),R4
	CALL SPDVX
	; CALC WIDTH&HEIGHT
	MOV R2,-(SP)		; R2=HEIGHT
	ASR R2
	ASR R2
	ASR R2
	ASR R2
	BEQ SR1			; CAN'T	BE ZERO
	CMP R2,#32.
	BHI SR1			; V.CLIP NOT SUPPORTED
	; TAKE ANIMATION FRAME
	MOVB (R5),R4
	ASL R4
	MOV ANIMAS-2(R4),R4
	BEQ TSCLX
	MOVB 1.(R5),R1
	INC R1
	ASL R1
	ADD R1,R4
	MOV (R4),(PC)+
ANIFR:	.WORD 0
	; TAKE SCALER
TSCLX:	MOV R2,R4
	ASL R4
	MOV SCTB-2.(R4),SR0+2
	MOV SCLR-2.(R4),(PC)+	; -2. BECAUSE TO INDEX
TSCLR:	.WORD 0
	MOV R2,R4
	ASR R4
	SUB R4,R0		; POSITION -X..+X
	MOV R2,R1		; SAVE COUNTER R2->R1 W=H
	DEC R1			; -1 (1..64->0..63)
	MOV R1,-(SP)		; COUNTER
	;
	MOVB (R5),R1
	ASL R1
	MOV MTRLM-2.(R1),R1	; MATERIAL
	;
	MOV TSCLR,(PC)+		; SUBTEXEL
HSCLR:	.WORD 0
	ASR HSCLR
SR2:	CMPB R0,#64.		; ONLY POSITIVE	INDEX 0..63
	BHIS SR4
	MOVB R0,R5		; TAKE INDEX
	ASL R5
	; COMPARE WITH RAWH
	CMP FRBF1(R5),2(SP)
	BGE SR4
	; TAKE SPRITE DATA
	MOVB HSCLR+1,R4
	ASL R4
	ADD ANIFR,R4		; ADD OFFSET
	MOV (R4),R4
	BEQ SR4			; IF NOTHING TO	DRAW
	; UPDATE HMSK
	MOVB R0,R5
	ASR R5
	BIS DRMSKH(R5),HMSK
	; UPDATE VMSK&LOAD PRESCALLER
	; (DO NOT MOVE OUTSIDE OF LOOP)
	MOV R2,R5
	BIS DRMSKV-1.(R5),VMSK
	ASL R5
	MOV PSCTAB-2.(R5),R3
	; DRAW
	MOV R2,-(SP)
	MOV R0,R5		; RELOAD ADDR.
	ASL R5
	ADD WMS,R5
SR0:	MOV #0,PC
SR5:	MOV (SP)+,R2
SR4:	INC R0			; UPDATE INDEX (NEXT COLUMN)
	ADD TSCLR,HSCLR
	DEC (SP)
	BPL SR2
	TST (SP)+
SR1:	TST (SP)+
	MOV (SP)+,R5
	RET
	;
	; SCALERS PROCS
SCL1:	BIT (R3)+,R4
	BEQ SR5
	MOV R1,(R5)
1$:	BR SR5
	;
SCL2:	BIT (R3)+,R4
	BEQ 1$
	MOV R1,(R5)
1$:	BIT (R3)+,R4
	BEQ 2$
	MOV R1,C_SCRWID(R5)
2$:	BR SR5
	;
SCL3:	BIT (R3)+,R4
	BEQ 1$
	MOV R1,(R5)
1$:	BIT (R3)+,R4
	BEQ 2$
	MOV R1,C_SCRWID(R5)
2$:	BIT (R3)+,R4
	BEQ 3$
	MOV R1,C_SCRWID+C_SCRWID(R5)
3$:	BR SR5
	;
SCL4:	BIT (R3)+,R4
	BEQ 1$
	MOV R1,(R5)
1$:	BIT (R3)+,R4
	BEQ 2$
	MOV R1,C_SCRWID(R5)
2$:	BIT (R3)+,R4
	BEQ 3$
	MOV R1,C_SCRWID+C_SCRWID(R5)
3$:	BIT (R3)+,R4
	BEQ 4$
	MOV R1,C_SCRWID+C_SCRWID+C_SCRWID(R5)
4$:	BR SR5
	;
SCL5:	ASR R2
	BIT (R3)+,R4
	BEQ 2$
	MOV R1,(R5)
2$:	ADD #C_SCRWID,R5
1$:	BIT (R3)+,R4
	BEQ 3$
	MOV R1,(R5)
3$:	BIT (R3)+,R4
	BEQ 4$
	MOV R1,C_SCRWID(R5)
4$:	ADD #C_SCRWID+C_SCRWID,R5
	SOB R2,1$
	BR SR5
	;
SCL6:	ASR R2
1$:	BIT (R3)+,R4
	BEQ 3$
	MOV R1,(R5)
3$:	BIT (R3)+,R4
	BEQ 4$
	MOV R1,C_SCRWID(R5)
4$:	ADD #C_SCRWID+C_SCRWID,R5
	SOB R2,1$
	BR SR5
	;
SCL7:	ASR R2
	BIT (R3)+,R4
	BEQ 2$
	MOV R1,(R5)
2$:	ADD #C_SCRWID,R5
1$:	BIT (R3),R4
	BEQ 3$
	MOV R1,(R5)
	MOV R1,C_SCRWID(R5)
3$:	ADD #4,R3
	ADD #C_SCRWID+C_SCRWID,R5
	SOB R2,1$
	BR SR5
	;
SCL8:	ASR R2
1$:	BIT (R3),R4
	BEQ 3$
	MOV R1,(R5)
	MOV R1,C_SCRWID(R5)
3$:	ADD #4,R3
	ADD #C_SCRWID+C_SCRWID,R5
	SOB R2,1$
	BR SR5
	;
