	;
	; GAME MENU
GOTIT:	MOV #4,(PC)+
MNUITM:	.WORD 0	; 4,3,2,1
	MOV #-1,(PC)+
OLDITM:	.WORD 0	; 4,3,2,1
	;
	CALL CLVRAM
	MOV #V_SC1,R0
	CALL SCH2
	;
	MOV #40000,R0
	CLR (R0)+
	TST R0
	BPL .-4
	MOV #TITDAT,R0
	MOV #43400,R1
	CALL UNPK
	CALL CONVSC
	CALL PRVER
	;
	MOV #TX1,R5
	CALL DRTEXT
	;
	CALL KEYRST
	;
MNULP2:	CALL PRNUM
MNULP:	CALL DRMENU
	;
	CALL FRN	; RANDOMIZE
	;
	MOV MNUITM,R1
	;
	TST KeyUp
	BEQ 1$
	CLR KeyUp
	CMP R1,#4
	BEQ MNULP
	INC R1
	MOV R1,MNUITM
	BR MNULP
1$:	TST KeyDown
	BEQ 2$
	CLR KeyDown
	CMP R1,#1
	BEQ MNULP
	DEC R1
	MOV R1,MNUITM
	BR MNULP
2$:	TST KeyEnter
	BEQ MNULP
	CLR KeyEnter
	DEC R1
	BEQ 5$ ; EXIT
	DEC R1
	BEQ 3$ ; INFO
	DEC R1
	BEQ 4$ ; ARENA
	; GO GAME
	CALL CLWHLE
	MOV #V_SC0,R0
	CALL SCH2
	CALL GO
	BR GOTIT
	; GO INFO
3$:	MOV #TX2,R5
	CALL DRINFO
	MOV #TX3,R5
	CALL DRINFO
	MOV #TX4,R5
	CALL DRINFO
	JMP GOTIT
	; GO ARENA
4$:	INC AMAP
	CMP AMAP,#5
	BLO MNULP2
	CLR AMAP
	JMP MNULP2
	; GO EXIT
5$:	; STOP PPU SERVICES
	MOV #F_EXIT,R0
	CALL SCH2
	TST @#PpuComm
	BNE .-4
	; RESTORE TIMER INT
	MOV OLDTMI,@#100
	MOV OLDTMM,@#102
	; FREE PPU MEMORY
	CALL PPFREE
	; SEND CLS
	TSTB @#177564
	BPL .-4
	MOV #14,@#177566
	; EXIT TO RT OS
	EMT 350
	HALT	; SHOULD'T BE THERE
	; DONE
ANYKEY:	CLR KeyAny
	MOV KeyAny,R0
	BEQ .-4
	RET
	;
KEYRST:	CLR KeyAny
	CLR KeyEnter
	CLR KeyUp
	CLR KeyDown
	RET
	;
DRTEXT:	MOV R5,R0
	CALL TXPS
	CMP (R5)+,(R5)+	; +4
	MOV R5,R1
	TST (R1)+	; +2
	MOV (R5)+,R5
1$:	CALL TXST
	SOB R5,1$
	RET
	;
DRINFO:	CALL CLVRAM
	CALL DRTEXT
	CALL ANYKEY
	RET
	;
INVSTR:	MOV #TX1,R0
	CALL TXPS
	SUB #2,R0
	ASL R5
	ADD MNUADR-2(R5),R0
	MOV R0,@#176640
	MOV #14,R4
2$:	MOV #22,R3
1$:	COM @#176642
	INC @#176640
	COM @#176642
	INC @#176640
	SOB R3,1$
	ADD #C_SCRWIH-44,@#176640
	SOB R4,2$
	RET
MNUADR:	.WORD 5280.-80.,3520.-80.,1760.-80.,-80.
	;
DRMENU:	CMP OLDITM,MNUITM
	BEQ 1$
	MOV OLDITM,R5
	BMI 2$
	CALL INVSTR
2$:	MOV MNUITM,R5
	CALL INVSTR
1$:	MOV MNUITM,OLDITM
	RET
	;
BEFUPD:	MOV MNUITM,R5 ;	HIDE/SHOW IF IN	NUM POS
	CMP R5,#3
	BNE 1$
	CALL INVSTR
1$:	RET
	;
PRNUM:	CALL BEFUPD
	MOV #STRNP,R0
	CALL TXPS
	MOV AMAP,R1
	ADD #61,R1
	MOVB R1,STRN
	MOV #STRN,R1
	CALL TXST
	CALL BEFUPD
	RET
	;
PRVER:	MOV #STRVP,R0
	CALL TXPS
	MOV #STRV,R1
	CALL TXST
	RET
	;
TX1:	.WORD 8.,12.,4.
	.ASCII"START GAME"<12><12><0>
	.ASCII"SELECTED ARENA"<12><12><0>
	.ASCII"INFORMATION"<12><12><0>
	.ASCII"EXIT"<0>
	.EVEN
	;
TX2:	.WORD 4.,3.,9.
	.ASCII<237>"LEGEND"<237><12><12><0>
	.ASCII"MONSTERS FROM THE PAST"<12><0>
	.ASCII"FOUND MAGIC PORTAL ON"<12><0>
	.ASCII"UKNC SCHOOL COMPUTERS!"<12><12><0>
	.ASCII"YOU ARE OUR LAST HOPE!"<12><12><0>
	.ASCII"FIGHT THIS EVIL AND MAY"<12><0>
	.ASCII"THE FORCE BE WITH YOU!"<12><12><0>
	.ASCII"YOUR TASK IS TO SCORE"<12><0>
	.ASCII"25 POINTS TO WIN!"<0>
	.EVEN
	;
TX3:	.WORD 4.,2.,11.
	.ASCII<237>"CONTROLS"<237><12><12><0>
	.ASCII"SPACE - FIRE"<12><0>
	.ASCII"ARROWS - TURN LEFT, RIGHT"<12><0>
	.ASCII"ARROWS, C, Y - MOVE"<12><0>
	.ASCII"SHIFT, F, W - SLIDE"<12><12><0>
	.ASCII"ENTER - RESTART"<12><12><0>
	.ASCII"K1 - MAP"<12><0>
	.ASCII"K2 - PAUSE"<12><0>
	.ASCII"K3, J - TURN AROUND"<12><0>
	.ASCII"K5 - EXIT"<12><12><0>
	.ASCII"ALSO YOU CAN USE MOUSE"<12><0>
	.EVEN
	;
TX4:	.WORD 4.,3.,9.
	.ASCII<237>"TEAM"<237><12><12><0>
	.ASCII"GAME:"<12><0>
	.ASCII"APRAKSIN DMITRY (ADW2RU)"<12><12><0>
	.ASCII"TITLE:"<12><0>
	.ASCII"LASHIN URY (iNoArt Studio)"<12><12><0>
	.ASCII"COMMUNITY:"<12><0>
	.ASCII"t.me"<57>"MC0511UKNC"<12><0>
	.ASCII"t.me"<57>"bk0010_11m"<12><12><0>
	.ASCII"16.01.25"<0>
	.EVEN
	;
STRNP:	.WORD 23.,14.
STRN:	.ASCII<0><0>
	.EVEN
STRVP:	.WORD 19.,20.
STRV:	.ASCII<223>"0.7 BETA UKNC"<221><0>
	.EVEN
	;
	; NRV2d	(UCL) FOR BK/PDP
	; INPUT:
	; R0 - SOURCE
	; R1 - DESTINATION
UNPK:	MOV #-1,R4
	XOR R2,R2
	BR DCL

NXDC:	MOVB (R0)+,(R1)+
DCL:	CALL RB
	BCS NXDC

	MOV #1,R3
OFN:	ADD R3,R3
	CALL RB
	ADC R3
	CALL RB
	BCS OFE
	DEC R3
	ADD R3,R3
	CALL RB
	ADC R3
	BR OFN

RB:	ADD R2,R2
	BEQ RBZ
	RET
RBZ:	MOVB (R0)+,R2
	SWAB R2
	BIC #177,R2
	BIS #200,R2
	ADD R2,R2
	RET

OFE:	SUB #3,R3
	BCC OF2

	MOV R4,R3
	XOR R5,R5
	CALL RB
	ADC R5
	BR OF3

OF2:	SWAB R3
	MOVB (R0)+,R5
	BIC #177400,R5
	BIS R5,R3
	COM R3
	BEQ BRK
	XOR R5,R5
	SEC
	ROR R3
	ADC R5
	MOV R3,R4

OF3:	ADD R5,R5
	CALL RB
	ADC R5
	BNE LF1

	INC R5
NXLF:	ADD R5,R5
	CALL RB
	ADC R5
	CALL RB
	BCC NXLF
	ADD #2,R5

LF1:	CMP R3,#175400
	ADC R5
	INC R5

	ADD R1,R3
NXMV:	MOVB (R3)+,(R1)+
	SOB R5,NXMV
	BR DCL

BRK:	RET
	;
	; CONVERSION OF BK SCREEN FORMAT INTO UKNC ONE
CONVSC:	MOV #40000,R0
	MOV #C_TADDR,R1

	MOV #150.,-(SP)	; HOW MANY LINES TO PROCESS

2$:	MOV #100,R2

1$:	MOVB (R0)+,R3

	CLR R4
	CLR R5

	ASR R3
	ROR R5
	ROR R5

	ASR R3
	ROR R4
	ROR R4

	ASR R3
	ROR R5
	ROR R5

	ASR R3
	ROR R4
	ROR R4

	ASR R3
	ROR R5
	ROR R5

	ASR R3
	ROR R4
	ROR R4

	ASR R3
	ROR R5
	ROR R5

	ASR R3
	ROR R4
	ROR R4

	SWAB R5
	BIS R4,R5

	MOV R5,R4
	ASL R4
	BIS R4,R5

	MOV R1,@#176640
	INC R1
	MOV R5,@#176642

	SOB R2,1$

	ADD #20,R1	; DELTA=80.-64.

	DEC (SP)
	BNE 2$
	TST (SP)+
	
	RET
	;
	; DRAW SINGLE CHAR
	; INPUT: R0=SCREEN ADDR
	; INPUT: R2=CHAR
	; OUTPUT: R0=NEW SCREEN	ADDR (+2)
TXCH:	MOV R0,PPUV1
	MOV R2,PPUV2
	MOV CHMSK,PPUV3
	MOV CHUND,PPUV4
	MOV #F_PCHR,R0
	CALL SCH2
	TST @#PpuComm
	BNE .-4
	MOV PPUV1,R0
	RET
	;
CHMSK:	.WORD 0
CHUND:	.WORD 0
	;
	; DRAW TEXT STRING
	; INPUT: R0=SCREEN ADDR
	; INPUT: R1=ADDR OF TEXT STRING
	; OUTPUT: R0=NEW SCREEN	ADDR (+X)
	; OUTPUT: R1=NEXT BYTE ADDR AFTER STR
TXST:	MOV R0,R3
1$:	CLR R2
	BISB (R1)+,R2
	BEQ 2$
	CMPB R2,#12	; NEXT LINE
	BEQ 3$
	CMPB R2,#221	; RED
	BEQ 4$
	CMPB R2,#222	; GREEN
	BEQ 5$
	CMPB R2,#223	; BLUE
	BEQ 6$
	CMPB R2,#237	; UNDERLINE
	BEQ 7$
	TSTB R2		; CORRECT CODE
	BPL 8$
	SUB #32.,R2
8$:	CALL TXCH
	BR 1$
2$:	RET
3$:	ADD #880.,R3
	MOV R3,R0
	BR 1$
4$:	CLR CHMSK
	BR 1$
5$:	MOV #^B0000000011111111,CHMSK
	BR 1$
6$:	MOV #^B1111111100000000,CHMSK
	BR 1$
7$:	COM CHUND
	BR 1$
	;
	; SET TEXT POSITION ADDRESS
	; INPUT: R0=ADDR OF COORDS
	; OUTPUT: R0=SCREEN ADDR
TXPS:	MOV (R0)+,-(SP)	; X
	ASL (SP)	; X*2
	MOV (R0)+,R0	; Y
	MOV R0,-(SP)
	ASL R0
	MOV R0,-(SP)
	ASL R0
	ASL R0
	ADD (SP)+,R0	;
	ADD (SP)+,R0	; Y=Y*11
	ASL R0
	ASL R0
	ASL R0
	ASL R0
	MOV R0,-(SP)
	ASL R0
	ASL R0
	ADD (SP)+,R0	; Y=Y*80
	ADD (SP)+,R0	; Y=Y+X
	ADD #C_TADDR+2400,R0	; +SCREEN OFFSET
	RET
	;

